---
# tasks file for roles/osp-instance-delete
- name: Fetch Instance Info
  os_server_info:
    cloud: openstack
    region_name: regionOne
  register: r_os_servers

# - name: Debug instances 
#   debug:
#     msg: "Server IP is {{ item.public_v4 }} and Server Name is {{ item.name }}"
#   loop: "{{ r_os_servers.openstack_servers }}"

- name: Delete server instances
  os_server:
    cloud: openstack
    name: "{{ item.name }}"
    state: absent
    wait: true
    timeout: 180
  loop: "{{ r_os_servers.openstack_servers }}"
  loop_control: 
    loop_var: __openstack_server
  async: 900
  poll: 0
  register: r_instances

- name: Wait for async OSP instance delete to complete
  async_status: "jid={{ item.ansible_job_id }}"
  register: r_wait
  until: r_wait.finished
  retries: 900
  loop: "{{ r_instances.results }}"

- name: Debug instances 
  debug:
    msg: "Server is {{ __instance.__openstack_server.name }}"
    verbosity: 2
  loop: "{{ r_instances.results }}"
  loop_control:
    loop_var: __instance


#Workings:

# - name: Delete server instances
#   os_server:
#     cloud: "openstack"
#     name: "{{ __openstack_server.name }}"
#     state: absent
#     wait: true
#     timeout: 180
#   loop: "{{ openstack_servers }}"
#   loop_control: 
#     loop_var: __openstack_server
#   async: 900
#   poll: 0
#   register: r_instances

# - name: Wait for async OSP instance delete to complete
#   async_status: "jid={{ item.ansible_job_id }}"
#   register: r_wait
#   until: r_wait.finished
#   retries: 900
#   loop: "{{ r_instances.results }}"

# - name: Debug instances 
#   debug:
#     msg: "Server is {{ __instance.__openstack_server.name }}"
#     verbosity: 2
#   loop: "{{ r_instances.results }}"
#   loop_control:
#     loop_var: __instance


# Couldn't get my head around reading json output. Will come back to this later


# - name: Fetch Instance Info
#   os_server_info:
#     cloud: openstack
#   register: results

# - name: Debug instances
#   debug:
#     msg: "{{ results }}"
#     verbosity: 2

# - name: save the Json data to a Variable as a Fact
#   set_fact:
#     jsondata: "{{ results.stdout | from_json }}"

# - name: Server Names
#   set_fact:  
#     servernames:  "{{ jsondata | json_query(jmesquery) }}"
#   vars:
#     jmesquery: "openstack_servers[*].name"

# - name: Print all server names
#   debug: 
#     msg: "{{ item }}"
#   with_items: 
#     - "{{ servernames }}"



# OLD - ignore

# - name: Debug instances2 
#   debug:
#     msg: "Server is {{ __instance.openstack_servers.name }}"
#     verbosity: 2
#   loop: "{{ results }}"
#   loop_control:
#     loop_var: __instance

# - name: Delete instances
#   os_server:
#     cloud: openstack
#     server: "{{ __instance.name }}"
#     state: absent
#     wait: true
#     timeout: 180
#   loop: "{{ results }}"
#   loop_control:
#     loop_var: __instance
  
